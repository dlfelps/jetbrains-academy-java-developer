type: edu
files:
- name: src/contacts/Main.java
  visible: true
  text: |
    package contacts;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/ContactsTest.java
  visible: false
  text: "import org.hyperskill.hstest.stage.StageTest;\nimport org.hyperskill.hstest.testcase.CheckResult;\n\
    import org.hyperskill.hstest.testcase.TestCase;\n\nimport java.util.List;\nimport\
    \ java.util.function.Function;\n\n\nclass TestClue {\n\n    Function<String, CheckResult>\
    \ callback;\n\n    TestClue(Function<String, CheckResult> callback) {\n      \
    \  this.callback = callback;\n    }\n}\n\n\npublic class ContactsTest extends\
    \ StageTest<TestClue> {\n\n    private CheckResult splitActionsFeedback(int actualSize,\
    \ int needSize) {\n        if (actualSize < needSize) {\n            return CheckResult.wrong(String.format(\"\
    This test should contain at least %d actions, but you have only %d. \" +\n   \
    \                         \"You should separate your actions with an empty line.\"\
    ,\n                    needSize,\n                    actualSize));\n        }\
    \ else {\n            return null;\n        }\n    }\n    \n    @Override\n  \
    \  public List<TestCase<TestClue>> generate() {\n        return List.of (\n  \
    \          new TestCase<TestClue>()\n                .setInput(\"exit\")\n   \
    \             .setAttach(new TestClue(output -> {\n                    output\
    \ = output.strip().toLowerCase();\n                    if (!output.contains(\"\
    enter action\")) {\n                        return new CheckResult(false,\n  \
    \                          \"No \\\"Enter action\\\" substring found in the output\"\
    );\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"count\\n\" +\n                    \"exit\"\
    )\n                .setAttach(new TestClue(output -> {\n                    output\
    \ = output.strip().toLowerCase();\n                    if (!output.contains(\"\
    0 records\")) {\n                        return new CheckResult(false,\n     \
    \                       \"No \\\"0 records\\\" substring found in the output.\
    \ \" +\n                                    \"If you already have the database,\
    \ try to delete it.\");\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"add\\n\" +\n                        \"person\\\
    n\" +\n                        \"John\\n\" +\n                        \"Smith\\\
    n\" +\n                        \"\\n\" +\n                        \"\\n\" +\n\
    \                        \"123 456 789\\n\" +\n                    \"count\\n\"\
    \ +\n                    \"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    output = output.strip().toLowerCase();\n         \
    \           if (output.contains(\"0 records\")) {\n                        return\
    \ new CheckResult(false,\n                            \"Can't add the person\"\
    );\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"add\\n\" +\n                        \"person\\\
    n\" +\n                        \"John\\n\" +\n                        \"Smith\\\
    n\" +\n                        \"\\n\" +\n                        \"\\n\" +\n\
    \                        \"123 456 789\\n\" +\n                    \"list\\n\"\
    \ +\n                    \"1\\n\" +\n                    \"menu\\n\" +\n     \
    \               \"exit\")\n                .setAttach(new TestClue(output -> {\n\
    \                    String[] blocks = output.strip().split(\"(\\\\s*\\\\n\\\\\
    s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 3);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Name: John\")\n                                && infoBlock.contains(\"Surname:\
    \ Smith\")\n                                && infoBlock.contains(\"Birth date:\
    \ [no data]\")\n                                && infoBlock.contains(\"Gender:\
    \ [no data]\")\n                                && infoBlock.contains(\"Number:\
    \ 123 456 789\")\n                                && infoBlock.contains(\"Time\
    \ created:\")\n                                && infoBlock.contains(\"Time last\
    \ edit:\")) {\n                            return CheckResult.correct();\n   \
    \                     }\n                    }\n                    return new\
    \ CheckResult(false,\n                            \"Something wrong with printing\
    \ user info\");\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"organization\\n\" +\n                        \"Pizza Shop\\n\" +\n\
    \                        \"Wall St. 1\\n\" +\n                        \"+0 (123)\
    \ 456-789-9999\\n\" +\n                    \"list\\n\" +\n                   \
    \ \"1\\n\" +\n                    \"menu\\n\" +\n                    \"exit\"\
    )\n                .setAttach(new TestClue(output -> {\n                    String[]\
    \ blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n              \
    \      var feedback = splitActionsFeedback(blocks.length, 3);\n              \
    \      if (feedback != null) return feedback;\n\n                    for (String\
    \ infoBlock : blocks) {\n                        if (infoBlock.contains(\"Organization\
    \ name: Pizza Shop\")\n                                && infoBlock.contains(\"\
    Address: Wall St. 1\")\n                                && infoBlock.contains(\"\
    Number: +0 (123) 456-789-9999\")\n                                && infoBlock.contains(\"\
    Time created:\")\n                                && infoBlock.contains(\"Time\
    \ last edit:\")) {\n                            return CheckResult.correct();\n\
    \                        }\n                    }\n                    return\
    \ new CheckResult(false,\n                            \"Something wrong with printing\
    \ organization info\");\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"person\\n\" +\n                        \"John\\n\" +\n          \
    \              \"Smith\\n\" +\n                        \"\\n\" +\n           \
    \             \"\\n\" +\n                        \"123 456 789\\n\" +\n      \
    \              \"list\\n\" +\n                    \"1\\n\" +\n               \
    \     \"edit\\n\" +\n                        \"gender\\n\" +\n               \
    \         \"M\\n\" +\n                    \"menu\\n\" +\n                    \"\
    list\\n\" +\n                    \"1\\n\" +\n                    \"menu\\n\" +\n\
    \                    \"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    String[] blocks = output.strip().split(\"(\\\\s*\\\
    \\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 6);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Name: John\")\n                                && infoBlock.contains(\"Surname:\
    \ Smith\")\n                                && infoBlock.contains(\"Birth date:\
    \ [no data]\")\n                                && infoBlock.contains(\"Gender:\
    \ M\")\n                                && infoBlock.contains(\"Number: 123 456\
    \ 789\")\n                                && infoBlock.contains(\"Time created:\"\
    )\n                                && infoBlock.contains(\"Time last edit:\"))\
    \ {\n                            return CheckResult.correct();\n             \
    \           }\n                    }\n                    return new CheckResult(false,\n\
    \                            \"Editing person is not working\");\n           \
    \     })),\n\n            new TestCase<TestClue>()\n                .setInput(\n\
    \                    \"add\\n\" +\n                        \"organization\\n\"\
    \ +\n                        \"Pizza Shop\\n\" +\n                        \"Wall\
    \ St. 1\\n\" +\n                        \"+0 (123) 456-789-9999\\n\" +\n     \
    \               \"list\\n\" +\n                    \"1\\n\" +\n              \
    \      \"edit\\n\" +\n                        \"address\\n\" +\n             \
    \           \"Wall St 2\\n\" +\n                    \"menu\\n\" +\n          \
    \          \"list\\n\" +\n                    \"1\\n\" +\n                   \
    \ \"menu\\n\" +\n                    \"exit\")\n                .setAttach(new\
    \ TestClue(output -> {\n                    String[] blocks = output.strip().split(\"\
    (\\\\s*\\\\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 6);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Organization name: Pizza Shop\")\n                                && infoBlock.contains(\"\
    Address: Wall St 2\")\n                                && infoBlock.contains(\"\
    Number: +0 (123) 456-789-9999\")\n                                && infoBlock.contains(\"\
    Time created:\")\n                                && infoBlock.contains(\"Time\
    \ last edit:\")) {\n                            return CheckResult.correct();\n\
    \                        }\n                    }\n                    return\
    \ new CheckResult(false,\n                            \"Editing organization is\
    \ not working\");\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"organization\\n\" +\n                        \"Pizza Shop\\n\" +\n\
    \                        \"Wall St. 1\\n\" +\n                        \"+0 (123)\
    \ 456-789-9999\\n\" +\n                    \"add\\n\" +\n                    \
    \    \"person\\n\" +\n                        \"John\\n\" +\n                \
    \        \"Smith\\n\" +\n                        \"\\n\" +\n                 \
    \       \"\\n\" +\n                        \"123 456 789\\n\" +\n            \
    \        \"add\\n\" +\n                        \"organization\\n\" +\n       \
    \                 \"PizzaNuts\\n\" +\n                        \"Wall St. 6\\n\"\
    \ +\n                        \"+0 (123) 456-789-9999\\n\" +\n                \
    \    \"search\\n\" +\n                        \"pizz\\n\" +\n                \
    \    \"1\\n\" +\n                    \"menu\\n\" +\n                    \"exit\"\
    )\n                .setAttach(new TestClue(output -> {\n                    String[]\
    \ blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n              \
    \      var feedback = splitActionsFeedback(blocks.length, 4);\n              \
    \      if (feedback != null) return feedback;\n    \n                    \n  \
    \                  for (String infoBlock : blocks) {\n                       \
    \ if (infoBlock.contains(\"Pizza Shop\")\n                                && infoBlock.contains(\"\
    PizzaNuts\")\n                                && !infoBlock.contains(\"John\"\
    )) {\n                            return CheckResult.correct();\n            \
    \            }\n                    }\n                    return new CheckResult(false,\n\
    \                            \"Search is not working\");\n                })),\n\
    \n            new TestCase<TestClue>()\n                .setInput(\n         \
    \           \"add\\n\" +\n                        \"organization\\n\" +\n    \
    \                    \"Pizza Shop\\n\" +\n                        \"Wall St. 1\\\
    n\" +\n                        \"+0 (123) 456-789-9999\\n\" +\n              \
    \      \"add\\n\" +\n                        \"person\\n\" +\n               \
    \         \"John\\n\" +\n                        \"Smith\\n\" +\n            \
    \            \"\\n\" +\n                        \"\\n\" +\n                  \
    \      \"123 456 789\\n\" +\n                    \"add\\n\" +\n              \
    \          \"organization\\n\" +\n                        \"PizzaNuts\\n\" +\n\
    \                        \"Wall St. 6\\n\" +\n                        \"+0 (123)\
    \ 456-789-9999\\n\" +\n                    \"search\\n\" +\n                 \
    \       \"s\\n\" +\n                    \"1\\n\" +\n                    \"menu\\\
    n\" +\n                    \"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    String[] blocks = output.strip().split(\"(\\\\s*\\\
    \\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 4);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Pizza Shop\")\n                                && infoBlock.contains(\"John Smith\"\
    )\n                                && infoBlock.contains(\"PizzaNuts\")) {\n \
    \                           return CheckResult.correct();\n                  \
    \      }\n                    }\n                    return new CheckResult(false,\n\
    \                            \"Search is not working\");\n                })),\n\
    \n        new TestCase<TestClue>()\n            .setInput(\n                \"\
    add\\n\" +\n                    \"organization\\n\" +\n                    \"\
    Pizza Shop\\n\" +\n                    \"Wall St. 1\\n\" +\n                 \
    \   \"+0 (123) 456-789-9999\\n\" +\n                \"add\\n\" +\n           \
    \         \"person\\n\" +\n                    \"John\\n\" +\n               \
    \     \"Smith\\n\" +\n                    \"\\n\" +\n                    \"\\\
    n\" +\n                    \"123 456 789\\n\" +\n                \"add\\n\" +\n\
    \                    \"organization\\n\" +\n                    \"PizzaNuts\\\
    n\" +\n                    \"Wall St. 6\\n\" +\n                    \"+0 (123)\
    \ 456-781-9999\\n\" +\n                \"search\\n\" +\n                    \"\
    789\\n\" +\n                \"1\\n\" +\n                \"menu\\n\" +\n      \
    \          \"exit\")\n            .setAttach(new TestClue(output -> {\n      \
    \          String[] blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\"\
    );\n                var feedback = splitActionsFeedback(blocks.length, 4);\n \
    \               if (feedback != null) return feedback;\n\n                for\
    \ (String infoBlock : blocks) {\n                    if (infoBlock.contains(\"\
    Pizza Shop\")\n                            && infoBlock.contains(\"John Smith\"\
    )\n                            && !infoBlock.contains(\"PizzaNuts\")) {\n    \
    \                    return CheckResult.correct();\n\n                    } else\
    \ if (infoBlock.contains(\"+0 (123) 456-789-9999\")\n                        \
    \    && infoBlock.contains(\"123 456 789\")\n                            && !infoBlock.contains(\"\
    +0 (123) 456-781-9999\")) {\n                        return CheckResult.correct();\n\
    \                    }\n                }\n                return new CheckResult(false,\n\
    \                        \"Search by phone number is not working\");\n       \
    \     }))\n        );\n    }\n\n    @Override\n    public CheckResult check(String\
    \ reply, TestClue clue) {\n        try {\n            return clue.callback.apply(reply);\n\
    \        }\n        catch (Exception ex) {\n            return new CheckResult(false,\
    \ \"Can't check the answer\");\n        }\n    }\n}\n"
  learner_created: false
- name: src/contacts/Contact.java
  visible: true
  text: |
    package contacts;

    import java.text.DateFormat;
    import java.text.ParseException;
    import java.time.Instant;
    import java.time.LocalDateTime;
    import java.time.LocalTime;
    import java.time.ZoneId;
    import java.time.format.DateTimeFormatter;
    import java.util.Date;
    import java.util.Optional;
    import java.util.Scanner;

    sealed public interface Contact permits Person, Organization {
        public String shortName();
    }

    enum Gender {
        M, F;
    }


    final class Person implements Contact {
        private String first;
        private String last;
        private Optional<PhoneNumber> number;
        private Optional<Date> dob;
        private Optional<Gender> gender;
        private String created;
        private String edited;

        public Person(String first, String last, Optional<PhoneNumber> number, Optional<Date> dob, Optional<Gender> gender ){
            this.first = first;
            this.last = last;
            this.number = number;
            this.dob = dob;
            this.gender = gender;

            //Get formatted String
            created = getCurrenTime();
            edited = created;
        }

        public static String getCurrenTime(){
            DateTimeFormatter FOMATTER = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm").withZone(ZoneId.systemDefault());;

            //Local time instance
            Instant instant = Instant.now();

            //Get formatted String
            return FOMATTER.format(instant);

        }
        public static Contact getInput() {
            Scanner s = new Scanner(System.in);

            System.out.print("Enter the name: ");
            String first = s.next();

            System.out.print("Enter the surname: ");
            String last = s.next();

            System.out.print("Enter the birthdate: ");
            Scanner s2 = new Scanner(System.in);
            String sDob = s2.nextLine();
            var dob = optionalDateFromString(sDob);

            System.out.print("Enter the gender: ");
            String gstring = s2.nextLine();
            var gender = optionalGenderFromString(gstring);

            System.out.print("Enter the number: ");
            var number = PhoneNumber.tryFrom(s2.nextLine());

            return new Person(first, last, number, dob, gender);
        }

        private static Optional<Date> optionalDateFromString(String sDob) {
            Optional<Date> dob;
            try {
                dob = Optional.of(DateFormat.getDateInstance().parse(sDob));
            }catch (ParseException e) {
                System.out.println("Bad birth date!");
                dob = Optional.empty();
            }
            return dob;
        }

        private static Optional<Gender> optionalGenderFromString(String gstring) {
            Optional<Gender> gender;

            try {
                gender = Optional.of(Gender.valueOf(gstring));
            }catch (IllegalArgumentException e) {
                System.out.println("Bad gender!");
                gender = Optional.empty();
            }
            return gender;
        }


        public void editFirst(String first){
            this.first = first;
            this.edited = getCurrenTime();
        }
        public void editLast(String last){
            this.last = last;
            this.edited = getCurrenTime();
        }
        public void editNumber(String number){
            this.number = PhoneNumber.tryFrom(number);
            this.edited = getCurrenTime();
        }
        public void editDob(String dob){
            this.dob = optionalDateFromString(dob);
            this.edited = getCurrenTime();
        }

        public void editGender(String gstring){
            this.gender = optionalGenderFromString(gstring);
            this.edited = getCurrenTime();
        }

        @Override
        public String toString(){
            var sNumber = number.map(PhoneNumber::toString).orElse("[no data]");
            var sGender =  gender.map(Gender::toString).orElse("[no data]");
            var sDob =  dob.map(Date::toString).orElse("[no data]");
            StringBuilder sb = new StringBuilder();
            sb.append("Name: " + first + System.lineSeparator());
            sb.append("Surname: " + last + System.lineSeparator());
            sb.append("Birth date: " + sDob + System.lineSeparator());
            sb.append("Gender: " + sGender + System.lineSeparator());
            sb.append("Number: " + sNumber + System.lineSeparator());
            sb.append("Time created: " + created + System.lineSeparator());
            sb.append("Time last edit: " + edited + System.lineSeparator());
            sb.append(System.lineSeparator());
            return sb.toString();
        }

        public String shortName(){
            return first + " " + last;
        }
    }

    final class Organization implements Contact {
        private String name;
        private String address;
        private Optional<PhoneNumber> number;

        private String created;
        private String edited;

        public Organization(String name, String address, Optional<PhoneNumber> number){
            this.name = name;
            this.address = address;
            this.number = number;

            //Get formatted String
            created = getCurrenTime();
            edited = created;

        }

        public static String getCurrenTime(){
            DateTimeFormatter FOMATTER = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm").withZone(ZoneId.systemDefault());;

            //Local time instance
            Instant instant = Instant.now();

            //Get formatted String
            return FOMATTER.format(instant);

        }

        public static Contact getInput() {
            Scanner s = new Scanner(System.in);

            System.out.print("Enter the organization name:");
            String name = s.nextLine();

            System.out.print("Enter the address:");
            Scanner s2 = new Scanner(System.in);
            String address = s2.nextLine();

            System.out.print("Enter the number:");
            var number = PhoneNumber.tryFrom(s2.nextLine());

            return new Organization(name, address, number);
        }


        @Override
        public String toString(){
            var sNumber =  number.map(PhoneNumber::toString).orElse("[no data]");
            StringBuilder sb = new StringBuilder();
            sb.append("Organization name: " + name + System.lineSeparator());
            sb.append("Address: " + address + System.lineSeparator());
            sb.append("Number: " + sNumber + System.lineSeparator());
            sb.append("Time created: " + created + System.lineSeparator());
            sb.append("Time last edit: " + edited + System.lineSeparator());
            sb.append(System.lineSeparator());
            return sb.toString();
        }

        public String shortName(){
            return name;
        }


        public void editName(String name){
            this.name = name;
            this.edited = getCurrenTime();
        }
        public void editAddress(String address){
            this.address = address;
            this.edited = getCurrenTime();
        }
        public void editNumber(String number){
            this.number = PhoneNumber.tryFrom(number);
            this.edited = getCurrenTime();
        }

    }
  learner_created: true
- name: src/contacts/PhoneBook.java
  visible: true
  text: |
    package contacts;

    import java.util.ArrayList;
    import java.util.Scanner;

    public class PhoneBook {
        private ArrayList<Contact> contacts;

        public PhoneBook() {
            contacts = new ArrayList<>();
        }

        public boolean count(){
            System.out.printf("The Phone Book has %d records%n", contacts.size());
            return true;
        }

        public boolean list(){
            for (int i=0; i<contacts.size();i++){
                System.out.printf("%d. %s",i+1, contacts.get(i).shortName());
            }
            return true;
        }

        private boolean edit(){
            if (contacts.isEmpty()){
                System.out.println("No records to edit!");
            } else{
                list();
                System.out.print("Select a record:");
                Scanner s = new Scanner(System.in);
                var id = s.nextInt();


                var currentContact = contacts.get(id-1); //gets reference to current id
                if (currentContact instanceof Person p) {
                    System.out.print("Select a field (name, surname, birth, gender, number): ");
                    var field = s.next();
                    System.out.printf("Enter %s:", field);
                    Scanner s2 = new Scanner(System.in);
                    String newInput = s2.nextLine();

                    switch(field){
                        case "name" -> p.editFirst(newInput);
                        case "surname" -> p.editLast(newInput);
                        case "birth" -> p.editDob(newInput);
                        case "gender" -> p.editGender(newInput);
                        default -> p.editNumber(newInput);
                    };
                } else if (currentContact instanceof Organization o) {
                    System.out.print("Select a field (address, number): ");
                    var field = s.next();
                    System.out.printf("Enter %s:", field);
                    Scanner s2 = new Scanner(System.in);
                    String newInput = s2.nextLine();

                    switch(field){
                        case "address" -> o.editAddress(newInput);
                        default -> o.editNumber(newInput);
                    };
                }

                System.out.printf("The record updated!%n%n");

            }
            return true;
        }

        private boolean add(){
            Scanner s = new Scanner(System.in);

            System.out.print("Enter the type (person, organization): ");
            String type = s.next();

            switch (type){
                case "person" -> contacts.add(Person.getInput());
                default -> contacts.add(Organization.getInput());
            }
            System.out.printf("The record added.%n");
            return true;
        }

        private boolean remove(){
            if (contacts.isEmpty()){
                System.out.println("No records to remove!");
            } else {
                Scanner s = new Scanner(System.in);
                list();

                System.out.printf("%nSelect a record:");
                var id = s.nextInt();

                contacts.remove(id - 1);
                System.out.println("The record removed!");
            }
            return true;
        }

        public boolean menu(){
            System.out.print("Enter action (add, remove, edit, count, info, exit): ");
            Scanner s = new Scanner(System.in);
            String action = s.next();
            return switch(action){
                case "add" -> add();
                case "remove" -> remove();
                case "edit" -> edit();
                case "count" -> count();
                case "info" -> info();
                default -> false;
            };
        }

        private boolean info() {
            list();
            Scanner s = new Scanner(System.in);

            System.out.printf("%nSelect a record: ");
            var id = s.nextInt();

            System.out.print(contacts.get(id-1));
            return true;
        }


    }
  learner_created: true
- name: src/contacts/PhoneNumber.java
  visible: true
  text: |
    package contacts;

    import java.util.Optional;
    import java.util.regex.Pattern;

    public class PhoneNumber {

        private final String validNumber;

        private static final Pattern pattern =  Pattern.compile("^\\+?(\\(\\w+\\)|\\w+[ -]\\(\\w{2,}\\)|\\w+)([ -]\\w{2,})*");

        private PhoneNumber(String s) {
            validNumber = s;
        }

        @Override
        public String toString(){
            return validNumber;
        }

        public static Optional<PhoneNumber> tryFrom(String s){
            var matcher = pattern.matcher(s);
            if (matcher.matches()){
                return Optional.of(new PhoneNumber(s));
            } else {
                System.out.println("Wrong number format!");
                return Optional.empty();
            }
        }

    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5327#comment
status: Unchecked
record: -1
